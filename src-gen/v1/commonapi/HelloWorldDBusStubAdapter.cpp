/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.v201512091512.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/commonapi/HelloWorld.hpp>
#include <v1/commonapi/HelloWorldDBusStubAdapter.hpp>

namespace v1 {
namespace commonapi {

std::shared_ptr<CommonAPI::DBus::DBusStubAdapter> createHelloWorldDBusStubAdapter(
                   const CommonAPI::DBus::DBusAddress &_address,
                   const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
                   const std::shared_ptr<CommonAPI::StubBase> &_stub) {
    return std::make_shared<HelloWorldDBusStubAdapter>(_address, _connection, _stub);
}

INITIALIZER(registerHelloWorldDBusStubAdapter) {
    CommonAPI::DBus::Factory::get()->registerStubAdapterCreateMethod(
    	HelloWorld::getInterface(), &createHelloWorldDBusStubAdapter);
}

HelloWorldDBusStubAdapterInternal::~HelloWorldDBusStubAdapterInternal() {
    deactivateManagedInstances();
    HelloWorldDBusStubAdapterHelper::deinit();
}

void HelloWorldDBusStubAdapterInternal::deactivateManagedInstances() {

}

const char* HelloWorldDBusStubAdapterInternal::getMethodsDBusIntrospectionXmlData() const {
    static const std::string introspectionData =
        "<method name=\"getInterfaceVersion\">\n"
            "<arg name=\"value\" type=\"uu\" direction=\"out\" />"
        "</method>\n"
        "<method name=\"sayHello\">\n"
            "<arg name=\"_name\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_message\" type=\"s\" direction=\"out\" />\n"
        "</method>\n"

    ;
    return introspectionData.c_str();
}

CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::commonapi::HelloWorldStub,
        CommonAPI::Version
        > HelloWorldDBusStubAdapterInternal::getHelloWorldInterfaceVersionStubDispatcher(&HelloWorldStub::getInterfaceVersion, "uu");




CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::commonapi::HelloWorldStub,
    std::tuple<std::string>,
    std::tuple<std::string>,
    std::tuple<CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::DBus::StringDeployment>
    
    > HelloWorldDBusStubAdapterInternal::sayHelloStubDispatcher(
    &HelloWorldStub::sayHello, "s",
					std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)));





const HelloWorldDBusStubAdapterHelper::StubDispatcherTable& HelloWorldDBusStubAdapterInternal::getStubDispatcherTable() {
    return stubDispatcherTable_;
}

const CommonAPI::DBus::StubAttributeTable& HelloWorldDBusStubAdapterInternal::getStubAttributeTable() {
    return stubAttributeTable_;
}

HelloWorldDBusStubAdapterInternal::HelloWorldDBusStubAdapterInternal(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
	: CommonAPI::DBus::DBusStubAdapter(_address, _connection,false),
      HelloWorldDBusStubAdapterHelper(_address, _connection, std::dynamic_pointer_cast<HelloWorldStub>(_stub), false),
      stubDispatcherTable_({
            { { "sayHello", "s" }, &commonapi::HelloWorldDBusStubAdapterInternal::sayHelloStubDispatcher }
            }),
        stubAttributeTable_() {

    stubDispatcherTable_.insert({ { "getInterfaceVersion", "" }, &commonapi::HelloWorldDBusStubAdapterInternal::getHelloWorldInterfaceVersionStubDispatcher });
}



} // namespace commonapi
} // namespace v1
